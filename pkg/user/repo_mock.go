// Code generated by MockGen. DO NOT EDIT.
// Source: user.go

// Package user is a generated GoMock package.
package user

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUserRepo is a mock of UserRepo interface.
type MockUserRepo struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepoMockRecorder
}

// MockUserRepoMockRecorder is the mock recorder for MockUserRepo.
type MockUserRepoMockRecorder struct {
	mock *MockUserRepo
}

// NewMockUserRepo creates a new mock instance.
func NewMockUserRepo(ctrl *gomock.Controller) *MockUserRepo {
	mock := &MockUserRepo{ctrl: ctrl}
	mock.recorder = &MockUserRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepo) EXPECT() *MockUserRepoMockRecorder {
	return m.recorder
}

// Authorize mocks base method.
func (m *MockUserRepo) Authorize(username, pass string) (*User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Authorize", username, pass)
	ret0, _ := ret[0].(*User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Authorize indicates an expected call of Authorize.
func (mr *MockUserRepoMockRecorder) Authorize(username, pass interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authorize", reflect.TypeOf((*MockUserRepo)(nil).Authorize), username, pass)
}

// GetSubscribedUsers mocks base method.
func (m *MockUserRepo) GetSubscribedUsers(userID int64) ([]User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscribedUsers", userID)
	ret0, _ := ret[0].([]User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscribedUsers indicates an expected call of GetSubscribedUsers.
func (mr *MockUserRepoMockRecorder) GetSubscribedUsers(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscribedUsers", reflect.TypeOf((*MockUserRepo)(nil).GetSubscribedUsers), userID)
}

// GetUserByTelegram mocks base method.
func (m *MockUserRepo) GetUserByTelegram(telegram string) (*User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByTelegram", telegram)
	ret0, _ := ret[0].(*User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByTelegram indicates an expected call of GetUserByTelegram.
func (mr *MockUserRepoMockRecorder) GetUserByTelegram(telegram interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByTelegram", reflect.TypeOf((*MockUserRepo)(nil).GetUserByTelegram), telegram)
}

// GetUsers mocks base method.
func (m *MockUserRepo) GetUsers() ([]User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsers")
	ret0, _ := ret[0].([]User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsers indicates an expected call of GetUsers.
func (mr *MockUserRepoMockRecorder) GetUsers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*MockUserRepo)(nil).GetUsers))
}

// MakeUser mocks base method.
func (m *MockUserRepo) MakeUser(username, pass, firstname, middlename, lastname, birthday, telegram string) (*User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeUser", username, pass, firstname, middlename, lastname, birthday, telegram)
	ret0, _ := ret[0].(*User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MakeUser indicates an expected call of MakeUser.
func (mr *MockUserRepoMockRecorder) MakeUser(username, pass, firstname, middlename, lastname, birthday, telegram interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeUser", reflect.TypeOf((*MockUserRepo)(nil).MakeUser), username, pass, firstname, middlename, lastname, birthday, telegram)
}

// Subscribe mocks base method.
func (m *MockUserRepo) Subscribe(userID, subscriberID int64, typeOf int) (*User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", userID, subscriberID, typeOf)
	ret0, _ := ret[0].(*User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockUserRepoMockRecorder) Subscribe(userID, subscriberID, typeOf interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockUserRepo)(nil).Subscribe), userID, subscriberID, typeOf)
}

// UpdateUser mocks base method.
func (m *MockUserRepo) UpdateUser(telegramID int64, telegram string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", telegramID, telegram)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockUserRepoMockRecorder) UpdateUser(telegramID, telegram interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockUserRepo)(nil).UpdateUser), telegramID, telegram)
}
